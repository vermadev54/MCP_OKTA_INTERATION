{"ast":null,"code":"import _objectSpread from \"/Users/nirmadevi/Documents/AIEngineering/mcp-okta-demo/streamlit-okta-oauth2/streamlit_okta/components/oauth/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/nirmadevi/Documents/AIEngineering/mcp-okta-demo/streamlit-okta-oauth2/streamlit_okta/components/oauth/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"readableStrategy\", \"writableStrategy\", \"queueingStrategy\"];\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Builder } from '../../builder/index';\n/** @ignore */\nexport function builderThroughDOMStream(options) {\n  return new BuilderTransform(options);\n}\n/** @ignore */\nexport class BuilderTransform {\n  constructor(options) {\n    // Access properties by string indexers to defeat closure compiler\n    this._numChunks = 0;\n    this._finished = false;\n    this._bufferedSize = 0;\n    const {\n        ['readableStrategy']: readableStrategy,\n        ['writableStrategy']: writableStrategy,\n        ['queueingStrategy']: queueingStrategy = 'count'\n      } = options,\n      builderOptions = _objectWithoutProperties(options, _excluded);\n    this._controller = null;\n    this._builder = Builder.new(builderOptions);\n    this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n    const {\n      ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000\n    } = _objectSpread({}, readableStrategy);\n    const {\n      ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000\n    } = _objectSpread({}, writableStrategy);\n    this['readable'] = new ReadableStream({\n      ['cancel']: () => {\n        this._builder.clear();\n      },\n      ['pull']: c => {\n        this._maybeFlush(this._builder, this._controller = c);\n      },\n      ['start']: c => {\n        this._maybeFlush(this._builder, this._controller = c);\n      }\n    }, {\n      'highWaterMark': readableHighWaterMark,\n      'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength\n    });\n    this['writable'] = new WritableStream({\n      ['abort']: () => {\n        this._builder.clear();\n      },\n      ['write']: () => {\n        this._maybeFlush(this._builder, this._controller);\n      },\n      ['close']: () => {\n        this._maybeFlush(this._builder.finish(), this._controller);\n      }\n    }, {\n      'highWaterMark': writableHighWaterMark,\n      'size': value => this._writeValueAndReturnChunkSize(value)\n    });\n  }\n  _writeValueAndReturnChunkSize(value) {\n    const bufferedSize = this._bufferedSize;\n    this._bufferedSize = this._getSize(this._builder.append(value));\n    return this._bufferedSize - bufferedSize;\n  }\n  _maybeFlush(builder, controller) {\n    if (controller === null) {\n      return;\n    }\n    if (this._bufferedSize >= controller.desiredSize) {\n      ++this._numChunks && this._enqueue(controller, builder.toVector());\n    }\n    if (builder.finished) {\n      if (builder.length > 0 || this._numChunks === 0) {\n        ++this._numChunks && this._enqueue(controller, builder.toVector());\n      }\n      if (!this._finished && (this._finished = true)) {\n        this._enqueue(controller, null);\n      }\n    }\n  }\n  _enqueue(controller, chunk) {\n    this._bufferedSize = 0;\n    this._controller = null;\n    chunk === null ? controller.close() : controller.enqueue(chunk);\n  }\n}\n/** @ignore */\nconst chunkLength = chunk => chunk.length;\n/** @ignore */\nconst chunkByteLength = chunk => chunk.byteLength;","map":{"version":3,"names":["Builder","builderThroughDOMStream","options","BuilderTransform","constructor","_numChunks","_finished","_bufferedSize","readableStrategy","writableStrategy","queueingStrategy","builderOptions","_objectWithoutProperties","_excluded","_controller","_builder","new","_getSize","chunkLength","chunkByteLength","readableHighWaterMark","_objectSpread","writableHighWaterMark","ReadableStream","cancel","clear","c","_maybeFlush","WritableStream","abort","write","close","finish","value","_writeValueAndReturnChunkSize","bufferedSize","append","builder","controller","desiredSize","_enqueue","toVector","finished","length","chunk","enqueue","byteLength"],"sources":["/Users/nirmadevi/Documents/AIEngineering/mcp-okta-demo/streamlit-okta-oauth2/streamlit_okta/components/oauth/node_modules/apache-arrow/io/whatwg/io/whatwg/builder.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}